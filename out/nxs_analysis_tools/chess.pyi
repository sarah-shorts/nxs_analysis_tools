from _typeshed import Incomplete
from nxs_analysis_tools import Scissors as Scissors, load_data as load_data
from nxs_analysis_tools.fitting import LinecutModel as LinecutModel

class TempDependence:
    xlabel: Incomplete
    datasets: Incomplete
    folder: Incomplete
    temperatures: Incomplete
    scissors: Incomplete
    linecuts: Incomplete
    linecutmodels: Incomplete
    def __init__(self) -> None: ...
    def get_folder(self): ...
    def clear_datasets(self) -> None: ...
    def load_datasets(self, folder, file_ending: str = 'hkli.nxs', temperatures_list: Incomplete | None = None) -> None: ...
    def set_window(self, window) -> None: ...
    def set_center(self, center) -> None: ...
    def cut_data(self, center: Incomplete | None = None, window: Incomplete | None = None, axis: Incomplete | None = None): ...
    def plot_linecuts(self, vertical_offset: int = 0, **kwargs): ...
    def highlight_integration_window(self, temperature: Incomplete | None = None, **kwargs): ...
    def plot_integration_window(self, temperature: Incomplete | None = None, **kwargs): ...
    def set_model_components(self, model_components) -> None: ...
    def set_param_hint(self, *args, **kwargs) -> None: ...
    def make_params(self) -> None: ...
    def guess(self) -> None: ...
    def print_initial_params(self) -> None: ...
    def plot_initial_guess(self) -> None: ...
    def fit(self) -> None: ...
    def plot_fit(self, mdheadings: bool = False, **kwargs) -> None: ...
    def print_fit_report(self) -> None: ...
