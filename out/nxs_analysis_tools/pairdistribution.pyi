from .datareduction import Padder as Padder, plot_slice as plot_slice, reciprocal_lattice_params as reciprocal_lattice_params
from _typeshed import Incomplete
from nexusformat.nexus import NXdata

class Symmetrizer2D:
    symmetrization_mask: NXdata
    mirror_axis: Incomplete
    symmetrized: Incomplete
    wedges: Incomplete
    rotations: Incomplete
    transform: Incomplete
    mirror: Incomplete
    skew_angle: Incomplete
    theta_max: Incomplete
    theta_min: Incomplete
    wedge: Incomplete
    def __init__(self, **kwargs) -> None: ...
    def set_parameters(self, theta_min, theta_max, lattice_angle: int = ..., mirror: bool = ..., mirror_axis: int = ...) -> None: ...
    def symmetrize_2d(self, data): ...
    def test(self, data, **kwargs): ...

class Symmetrizer3D:
    lattice_params: Incomplete
    reciprocal_lattice_params: Incomplete
    symmetrized: Incomplete
    data: Incomplete
    plane1symmetrizer: Incomplete
    plane2symmetrizer: Incomplete
    plane3symmetrizer: Incomplete
    q1: Incomplete
    q2: Incomplete
    q3: Incomplete
    plane1: Incomplete
    plane2: Incomplete
    plane3: Incomplete
    def __init__(self, data: Incomplete | None = ...) -> None: ...
    def set_data(self, data) -> None: ...
    def set_lattice_params(self, lattice_params) -> None: ...
    def symmetrize(self): ...
    def save(self, fout_name: Incomplete | None = ...) -> None: ...

def generate_gaussian(H, K, L, amp, stddev, lattice_params, coeffs: Incomplete | None = ...): ...

class Puncher:
    punched: Incomplete
    data: Incomplete
    mask: Incomplete
    reciprocal_lattice_params: Incomplete
    lattice_params: Incomplete
    def __init__(self) -> None: ...
    def set_data(self, data) -> None: ...
    def set_lattice_params(self, lattice_params) -> None: ...
    def add_mask(self, maskaddition) -> None: ...
    def subtract_mask(self, masksubtraction) -> None: ...
    def generate_bragg_mask(self, punch_radius, coeffs: Incomplete | None = ..., thresh: Incomplete | None = ...): ...
    def generate_mask_at_coord(self, coordinate, punch_radius, coeffs: Incomplete | None = ..., thresh: Incomplete | None = ...): ...
    def punch(self): ...

class Interpolator:
    data: Incomplete
    def __init__(self) -> None: ...
    def set_data(self, data) -> None: ...
    kernel: Incomplete
    def set_kernel(self, kernel) -> None: ...
    def generate_gaussian_kernel(self, amp, stddev, coeffs: Incomplete | None = ...) -> None: ...
    def interpolate(self) -> None: ...
